package com.example.completecruddemoapp;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.media.AudioFocusRequest;
import android.widget.Toast;

import androidx.annotation.Nullable;

import java.util.ArrayList;
import java.util.List;

public class DBHelper extends SQLiteOpenHelper {

    private static final String DB_NAME = "teamsDB";
    private static final int DB_VERSION = 1;

    private Context context;

    //table and columns
    private static final String TABLE_TEAM = "team";
    //columns
    private static final String TEAM_ID = "team_id";
    private static final String TEAM_NAME = "team_name";
    private static final String TEAM_CAPTAIN = "team_captain";
    private static final String TOTAL_PLAYERS = "total_players";
    private static final String CREATED_AT = "created_at";

    public DBHelper(@Nullable Context context) {
        super(context, DB_NAME, null, DB_VERSION);
        this.context=context;
    }

    @Override
    public void onCreate(SQLiteDatabase sqLiteDatabase) {
        String query = "CREATE TABLE " + TABLE_TEAM + " ( "
                + TEAM_ID + " INTEGER PRIMARY KEY AUTOINCREMENT ,"
                + TEAM_NAME + " TEXT ,"
                + TEAM_CAPTAIN + " TEXT, "
                + TOTAL_PLAYERS + " INTEGER, "
                + CREATED_AT + " DATETIME DEFAULT CURRENT_TIMESTAMP"
                + " )";

        sqLiteDatabase.execSQL(query);
    }

    @Override
    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
        String query = "DROP TABLE IF EXISTS " + TABLE_TEAM;
        sqLiteDatabase.execSQL(query);
        onCreate(sqLiteDatabase);
    }

    //INSERT TEAM
    public void insertTeam(Team team) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(TEAM_NAME, team.getTeam_name());
        values.put(TEAM_CAPTAIN, team.getTeam_captain());
        values.put(TOTAL_PLAYERS, team.getTotal_players());
        db.insert(TABLE_TEAM, null, values);
        db.close();
    }

    //UPDATE TEAM
    public void updateTeam(Team team) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(TEAM_NAME, team.getTeam_name());
        values.put(TEAM_CAPTAIN, team.getTeam_captain());
        values.put(TOTAL_PLAYERS, team.getTotal_players());
        db.update(TABLE_TEAM, values, TEAM_ID + "=?", new String[]{String.valueOf(team.getTeam_id())});
        db.close();
    }

    //DELETE TEAM
    public void deleteTeam(Team team) {
        SQLiteDatabase db = this.getWritableDatabase();
        int n=db.delete(TABLE_TEAM, TEAM_ID + "=?", new String[]{String.valueOf(team.getTeam_id())});
        Toast.makeText(context,"Team Deleted Successfully.",Toast.LENGTH_SHORT).show();
        db.close();
    }

    //GET TEAMS
    public List<Team> getTeams() {
        SQLiteDatabase db = this.getReadableDatabase();
        List<Team> teams = new ArrayList<>();
        String query = "SELECT * FROM " + TABLE_TEAM;
        Cursor cursor = db.rawQuery(query, null);
        if (cursor.moveToFirst()) {
            do {
                Team team = new Team(cursor.getInt(0), cursor.getInt(3), cursor.getString(1), cursor.getString(2));
                teams.add(team);
            } while (cursor.moveToNext());
        }
        db.close();
        return teams;
    }

    //GET TEAM
    public Team getTeam(int teamId) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.query(TABLE_TEAM, new String[]{TEAM_ID, TEAM_NAME, TEAM_CAPTAIN, TOTAL_PLAYERS}, TEAM_ID + "=?", new String[]{String.valueOf(teamId)}, null, null, null);
        if (cursor != null) {
            cursor.moveToFirst();
        }

        Team team = new Team(cursor.getInt(0), cursor.getInt(3), cursor.getString(1), cursor.getString(2));
        return team;
    }

    //GET TEAM COUNT
    public int getTeamCount() {
        SQLiteDatabase db = this.getReadableDatabase();
        String query = "SELECT * FROM " + TABLE_TEAM;
        Cursor cursor = db.rawQuery(query, null);
        return cursor.getCount();
    }
}
